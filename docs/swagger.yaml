openapi: "3.0.0"
servers:
  - url: http://localhost:4000
info:
  description: ""
  version: "1.0.0"
  title: "cojt_sns_api"
tags:
  - name: "User"
    description: "Operations about user"
  - name: "Auth"
    description: "Operations about login/logout"
  - name: "Tag"
    description: "タグについての操作"
  - name: "Group"
    description: "グループについての操作"
  - name: "Post"
    description: "ポストについての操作"
paths:
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "ログイン"
      operationId: "authLogin"
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: "ログイン情報不足"
        "401":
          description: "ログイン情報が間違い"
        "500":
          description: "Internal Server Error"

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: "ログアウト"
      operationId: "authLogout"
      security:
        - Bearer: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "string"
        "403":
          description: "認証不正"
        "500":
          description: "Internal Server Error"
  /users:
    post:
      tags:
        - "User"
      summary: "ユーザーの新規作成"
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateBody"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: "Internal Server Error"

  /users/{id}:
    get:
      tags:
        - "User"
      summary: "ユーザー情報の取得"
      operationId: "getUserById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    put:
      tags:
        - "User"
      security:
        - Bearer: []
      summary: "ユーザー情報の更新"
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateBody"
      responses:
        "400":
          description: "Invalid user supplied"
        "403":
          description: "Forbidden"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
        - "User"
      security:
        - Bearer: []
      summary: "ユーザーの削除"
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "削除完了"
        "403":
          description: "Forbidden"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
  /users/{id}/tags:
    get:
      tags:
        - "User"
      summary: "特定のユーザー持つタグを取得する"
      operationId: "getUserTags"
      parameters:
        - name: "id"
          in: "path"
          description: "ユーザのID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserTags"
        "500":
          description: "Internal Server Error"
  /users/{id}/twitter_profile:
    get:
      tags:
        - "User"
      security:
        - Bearer: []
      summary: "特定のユーザーのTwitterプロフィールを取得する"
      operationId: "getUserTwitterProfile"
      parameters:
        - name: "id"
          in: "path"
          description: "ユーザのID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserProfile"
        "403":
          description: "Forbidden"
        "404":
          description: "User not found"
        "500":
          description: "Internal Server Error"
  /tags:
    get:
      tags:
        - "Tag"
      summary: "タグを検索する"
      operationId: "searchTag"
      parameters:
        - name: "name"
          in: "query"
          description: "検索name 指定しない場合は全件検索"
          schema:
            type: "string"
        - name: "descendants"
          in: "query"
          description: "返却する子孫の世代数"
          schema:
            type: "integer"
            default: 0
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/TagSearchResult"
        "400":
          description: "リクエスト不正"
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - "Tag"
      security:
        - Bearer: []
      summary: "タグを登録する"
      operationId: "postTag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: "リクエスト不正"
        "402":
          description: "認証不正"
        "500":
          description: "Internal Server Error"
  /tags/{id}:
    get:
      tags:
        - "Tag"
      summary: "IDからTagを取得する"
      operationId: "getTag"
      parameters:
        - name: "id"
          in: "path"
          description: "TagのID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "404":
          description: "そのIDのグループが存在しない"
        "500":
          description: "Internal Server Error"
  /groups:
    get:
      tags:
        - "Group"
      summary: "グループを検索する"
      operationId: "searchGroup"
      parameters:
        - name: "tagId"
          in: "query"
          description: "検索 tagId 指定しない場合は全件検索 privateのグループは見れないようにする"
          required: false
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation "
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupSearchResult"
        "402":
          description: "認証不正"
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - "Group"
      security:
        - Bearer: []
      summary: "グループを作る"
      operationId: "postGroup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: "不正なリクエストです。"
        "402":
          description: "認証不正"
        "500":
          description: "Internal Server Error"
  /groups/{id}:
    get:
      tags:
        - "Group"
      summary: "IDからGroupを取得する"
      operationId: "getGroup"
      parameters:
        - name: "id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "403":
          description: "不正なアクセスです。"
        "404":
          description: "そのIDのグループが存在しない"
        "500":
          description: "Internal Server Error"
    put:
      tags:
        - "Group"
      security:
        - Bearer: []
      summary: "Updated Group"
      description: "グループの情報を更新する"
      operationId: "updateGroup"
      parameters:
        - name: "id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: "Updated Group object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: "Invalid user supplied"
        "402":
          description: "認証不正"
        "403":
          description: "不正なアクセスです。"
        "404":
          description: "そのIDのグループが存在しない"
        "500":
          description: "Internal Server Error"
  /posts:
    get:
      tags:
        - "Post"
      summary: "グループを検索する"
      operationId: "searchPost"
      parameters:
        - name: "tagId"
          in: "query"
          description: "検索 tagId 指定しない場合は全件検索 privateのグループは見れないようにする"
          required: false
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation "
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/GroupSearchResult"
        "402":
          description: "認証不正"
        "500":
          description: "Internal Server Error"
  /groups/{group_id}/public/posts:
    get:
      tags:
        - "Post"
        - "Group"
      summary: "パブリックグループ内のをポストを取得する"
      operationId: "getPublicGroupPosts"
      parameters:
        - name: "group_id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
        - name: "content"
          in: "query"
          description: "content"
          schema:
            type: "string"
        - name: "from"
          in: "query"
          description: "投稿先ユーザー"
          schema:
            type: "integer"
        - name: "since"
          in: "query"
          description: "開始日"
          schema:
            type: "string"
        - name: "until"
          in: "query"
          description: "終了日"
          schema:
            type: "string"
        - name: "since_timestamp"
          in: "query"
          description: "開始タイムスタンプ"
          schema:
            type: "string"
        - name: "until_timestamp"
          in: "query"
          description: "終了タイムスタンプ"
          schema:
            type: "string"
        - name: "max"
          in: "query"
          description: "投稿の最大件数"
          schema:
            type: "integer"
            default: 100
      responses:
        "200":
          description: "successful operation "
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PostSearchResult"
        "400":
          description: "リクエスト不正"
        "402":
          description: "認証不正"
        "403":
          description: "パブリックグループではありません。"
        "404":
          description: "グループが存在しません。"
        "500":
          description: "Internal Server Error"
  /groups/{group_id}/posts:
    get:
      tags:
        - "Post"
        - "Group"
      summary: "グループ内のをポストを検索する"
      operationId: "getGroupPosts"
      security:
        - Bearer: []
      parameters:
        - name: "group_id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
        - name: "content"
          in: "query"
          description: "content"
          schema:
            type: "string"
        - name: "from"
          in: "query"
          description: "投稿先ユーザー"
          schema:
            type: "integer"
        - name: "since"
          in: "query"
          description: "開始日"
          schema:
            type: "string"
        - name: "until"
          in: "query"
          description: "終了日"
          schema:
            type: "string"
        - name: "since_timestamp"
          in: "query"
          description: "開始タイムスタンプ"
          schema:
            type: "string"
        - name: "until_timestamp"
          in: "query"
          description: "終了タイムスタンプ"
          schema:
            type: "string"
        - name: "max"
          in: "query"
          description: "投稿の最大件数"
          schema:
            type: "integer"
            default: 100
      responses:
        "200":
          description: "successful operation "
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/PostSearchResult"
        "400":
          description: "リクエスト不正"
        "402":
          description: "認証不正"
        "403":
          description: "グループへの権限がありません。"
        "404":
          description: "グループが存在しません。"
        "500":
          description: "Internal Server Error"
    post:
      tags:
        - "Post"
        - "Group"
      security:
        - Bearer: []
      summary: "ポストを投稿する"
      operationId: "postPost"
      parameters:
        - name: "group_id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: "グループが存在しない。contentがない。"
        "402":
          description: "認証不正"
        "403":
          description: "グループに投稿する権限がない"
        "500":
          description: "Internal Server Error"
  /posts/{id}:
    get:
      tags:
        - "Post"
      summary: "IDからPostを取得する"
      operationId: "getPost"
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          description: "GroupのID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "402":
          description: "認証不正"
        "403":
          description: "不正なアクセスです。"
        "404":
          description: "そのIDのポストが存在しない"
        "500":
          description: "Internal Server Error"
    put:
      tags:
        - "Post"
      security:
        - Bearer: []
      summary: "Updated Post"
      description: "ポストを更新する"
      operationId: "updatePost"
      parameters:
        - name: "id"
          in: "path"
          description: "PostのID"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: "Updated Post object"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: こんばんは
                  description: 投稿内容
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: "リクエスト不正"
        "402":
          description: "認証不正"
        "403":
          description: "不正なアクセスです。"
        "404":
          description: "そのIDのポストが存在しない"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
        - "Post"
      security:
        - Bearer: []
      summary: "ユーザーの削除"
      operationId: "deletePost"
      parameters:
        - name: "id"
          in: "path"
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Post"
        "402":
          description: "認証不正"
        "403":
          description: "ユーザに権限が存在しない"
        "404":
          description: "ポストが存在しない"
        "500":
          description: "Internal Server Error"
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
  schemas:
    Login:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
          description: "ユーザー名"
        bio:
          type: "string"
          description: "プロフィール"
        icon_url:
          type: "string"
          description: "プロフィール画像のurl"
    UserTags:
      type: array
      description: "ユーザーに紐づくタグの検索結果(配列)"
      items:
        $ref: "#/components/schemas/Tag"
    UserProfile:
      type: object
      description: "Twitterのユーザープロフィール情報"
      properties:
        id:
          type: "integer"
          example: "1"
        name:
          type: "string"
          description: "Twitterのユーザー名"
          example: "うしゅ"
        bio:
          type: "string"
          description: "TwitterのBIO"
          example: "klis18/AmCr @karahajimaru"
        image_url:
          type: "string"
          description: "TwitterのBIO"
          example: "https://pbs.twimg.com/profile_images/..."
    UserCreateBody:
      type: object
      description: "Twitterのユーザープロフィール情報"
      properties:
        id:
          type: "integer"
          example: "1"
        name:
          type: "string"
          description: "Twitterのユーザー名"
          example: "うしゅ"
        bio:
          type: "string"
          description: "TwitterのBIO"
          example: "klis18/AmCr @karahajimaru"
        email:
          type: "string"
          description: "メールアドレス"
          example: "test@example.com"
        image:
          type: "string"
          description: "プロフィール画像"
          format: binary
          example: "data:application/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAE1JREFUOI1jYBgFWEF6aur/9NTU/7j4yICJUssoNgAO8DkTnzqKXcCIzyZk/szZs7GqxSqIyyvYDKG+FwgFJLor8Lpg5uzZjLj8PngAAIkFIS4IIkrMAAAAAElFTkSuQmCC"
        password:
          type: "string"
          description: "パスワード"
          example: "password"
          writeOnly: true
        oauth_token:
          type: "string"
          description: "Twitterのアクセストークン"
          example: "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
        oauth_token_secret:
          type: "string"
          description: "Twitterのアクセストークン"
          example: "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
        tags:
          type: array
          items:
            type: integer
            example: "[1, 2, 3]"
          description: "タグidの配列"
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        name:
          type: "string"
          description: "タグ名"
          example: "情報メディア創成学類"
        parent_id:
          type: "integer"
          description: "親タグID"
        fullname:
          type: "string"
          description: "フルタグ名"
          example: "筑波大学.情報学群.情報メディア創成学類"
          readOnly: true
    TagSearchResultCandidate:
      type: object
      description: "タグの検索結果1件"
      properties:
        tag:
          $ref: "#/components/schemas/Tag"
        ancestors:
          type: array
          description: "tagの先祖idたち(親から)"
          items:
            $ref: "#/components/schemas/Tag"
        descendants:
          type: array
          description: "tagの子孫idたち(子から)"
          items:
            $ref: "#/components/schemas/Tag"
    TagSearchResult:
      type: array
      description: "タグの検索結果"
      items:
        $ref: "#/components/schemas/TagSearchResultCandidate"
    Group:
      type: "object"
      required:
        - id
        - questions
        - tags
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        twitter_traceability:
          type: "boolean"
          description: "ツイッターから見れるかどうか?"
          default: false
        questions:
          type: "array"
          items:
            type: string
            example: "スマブラのプレイ時間は?"
          description: "参加者のプロフィールの質問事項"
        introduction:
          type: "boolean"
          description: "プロフィールに自己紹介(自由記述)があるか?"
          default: false
        tags:
          type: array
          items:
            type: integer
          description: "タグidの配列"
    GroupSearchResult:
      type: array
      description: "グループの検索結果"
      items:
        $ref: "#/components/schemas/GroupSearchResultCandidate"
    GroupSearchResultCandidate:
      type: object
      description: "グループの検索結果1件"
      properties:
        group:
          $ref: "#/components/schemas/Group"
    Post:
      type: "object"
      required:
        - id
        - group_id
        - content
      properties:
        id:
          type: "integer"
          example: 1
          readOnly: true
        content:
          type: "string"
          description: "内容"
          example: "こんにちは！"
        user_id:
          type: "integer"
          example: 1
          description: "ユーザーのID"
          readOnly: true
        group_id:
          type: "integer"
          description: "グループのID"
          example: 1
        created_at:
          type: "string"
          description: "作成日時"
          example: "2020-06-09T09:20:52.220Z"

    PostSearchResult:
      type: array
      description: "グループの検索結果"
      items:
        $ref: "#/components/schemas/Post"
